Index: src/components/QuestionCheckbox/questCheckbox.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/QuestionCheckbox/questCheckbox.jsx b/src/components/QuestionCheckbox/questCheckbox.jsx
--- a/src/components/QuestionCheckbox/questCheckbox.jsx	(revision 4ffef9bd9466d66884ce30e194041a2d813a86fd)
+++ b/src/components/QuestionCheckbox/questCheckbox.jsx	(revision 1907ff12bcba588b060a38650bbf444b1cb7e411)
@@ -1,16 +1,16 @@
-import React, { useState } from 'react';
-import './style.css';
+import React, { useState } from "react";
+import "./style.css";
 
-import Checkbox from '../../components/Checkbox/checkbox.jsx';
-import { useFormContext } from '../../utils/formContext.jsx';
+import Checkbox from "../../components/Checkbox/checkbox.jsx";
+import { useFormContext } from "../../utils/formContext.jsx";
 
 const QuestionCheckbox = ({ quest }) => {
   const { formState, setFormState } = useFormContext();
 
   const noPreviousCheckedDefault =
-    typeof formState[quest.id] === 'undefined'
+    formState.form[quest.id] === null
       ? false
-      : formState[quest.id].value.length === 0;
+      : formState.form[quest.id].value.length === 0;
 
   const [noPreviousChecked, setNoPreviousChecked] = useState(
     noPreviousCheckedDefault
@@ -20,14 +20,14 @@
     if (
       value &&
       quest.maxChecked &&
-      formState[quest.id]?.value.filter((item) => item).length >=
+      formState.form[quest.id]?.value.filter((item) => item).length >=
         quest.maxChecked
     ) {
       alert(`Je možné zaškrtnout pouze ${quest.maxChecked} možnosti.`);
       return;
     }
 
-    const newChecked = [...(formState[quest.id]?.value || [])];
+    const newChecked = [...(formState.form[quest.id]?.value || [])];
     newChecked[i] = value;
 
     setFormState(
@@ -54,7 +54,7 @@
           key={i}
           disabled={noPreviousChecked}
           func={(value) => handleChange(value, i)}
-          value={!!formState[quest.id]?.value[i]}
+          value={!!formState.form[quest.id]?.value[i]}
           text={answer}
         />
       ))}
Index: src/components/QuestionInput/questInput.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/QuestionInput/questInput.jsx b/src/components/QuestionInput/questInput.jsx
--- a/src/components/QuestionInput/questInput.jsx	(revision 4ffef9bd9466d66884ce30e194041a2d813a86fd)
+++ b/src/components/QuestionInput/questInput.jsx	(revision 1907ff12bcba588b060a38650bbf444b1cb7e411)
@@ -1,14 +1,14 @@
-import React from 'react';
-import Input from '../Input/input';
-import './style.css';
+import React from "react";
+import Input from "../Input/input";
+import "./style.css";
 
-import { useFormContext } from '../../utils/formContext.jsx';
+import { useFormContext } from "../../utils/formContext.jsx";
 
 const QuestionInput = ({ quest }) => {
   const { formState, setFormState } = useFormContext();
 
   const handleChange = (value, i) => {
-    const newAnswered = [...(formState[quest.id]?.value || [])];
+    const newAnswered = [...(formState.form[quest.id]?.value || [])];
     newAnswered[i] = value;
 
     setFormState({ type: quest.type, value: newAnswered }, quest.id);
@@ -20,7 +20,7 @@
         <Input
           key={i}
           input={answer}
-          value={formState[quest.id]?.value[i] || ''}
+          value={formState.form[quest.id]?.value[i] || ""}
           func={(value) => handleChange(value, i)}
         />
       ))}
Index: src/components/QuestionLongTextArea/QuestionLongTextArea.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/QuestionLongTextArea/QuestionLongTextArea.jsx b/src/components/QuestionLongTextArea/QuestionLongTextArea.jsx
--- a/src/components/QuestionLongTextArea/QuestionLongTextArea.jsx	(revision 4ffef9bd9466d66884ce30e194041a2d813a86fd)
+++ b/src/components/QuestionLongTextArea/QuestionLongTextArea.jsx	(revision 1907ff12bcba588b060a38650bbf444b1cb7e411)
@@ -1,14 +1,14 @@
-import React from 'react';
-import TextArea from '../TextArea/textArea';
-import './style.css';
+import React from "react";
+import TextArea from "../TextArea/textArea";
+import "./style.css";
 
-import { useFormContext } from '../../utils/formContext.jsx';
+import { useFormContext } from "../../utils/formContext.jsx";
 
 const QuestionLongTextArea = ({ quest }) => {
   const { formState, setFormState } = useFormContext();
 
   const handleChange = (value, i) => {
-    const newAnswered = [...(formState[quest.id]?.value || [])];
+    const newAnswered = [...(formState.form[quest.id]?.value || [])];
     newAnswered[i] = value;
 
     setFormState({ type: quest.type, value: newAnswered }, quest.id);
@@ -22,7 +22,7 @@
           text={answer}
           extraText={quest.example}
           classN="longTextArea"
-          value={formState[quest.id]?.value[i] || ''}
+          value={formState.form[quest.id]?.value[i] || ""}
           func={(value) => handleChange(value, i)}
           maxLength={450}
         />
Index: src/components/QuestionRadioButton/questRadioButton.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/QuestionRadioButton/questRadioButton.jsx b/src/components/QuestionRadioButton/questRadioButton.jsx
--- a/src/components/QuestionRadioButton/questRadioButton.jsx	(revision 4ffef9bd9466d66884ce30e194041a2d813a86fd)
+++ b/src/components/QuestionRadioButton/questRadioButton.jsx	(revision 1907ff12bcba588b060a38650bbf444b1cb7e411)
@@ -1,8 +1,8 @@
-import React from 'react';
-import './style.css';
+import React from "react";
+import "./style.css";
 
-import RadioButton from '../RadioButton/radioButton';
-import { useFormContext } from '../../utils/formContext.jsx';
+import RadioButton from "../RadioButton/radioButton";
+import { useFormContext } from "../../utils/formContext.jsx";
 
 const QuestionRadioButton = ({ quest }) => {
   const { formState, setFormState } = useFormContext();
@@ -19,7 +19,7 @@
           name={`radio-${quest.id}`}
           func={(value) => handleChange(value)}
           value={i}
-          checked={formState[quest.id]?.value === String(i)}
+          checked={formState.form[quest.id]?.value === String(i)}
           text={answer}
         />
       ))}
Index: src/components/QuestionTextArea/QuestionTextArea.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/QuestionTextArea/QuestionTextArea.jsx b/src/components/QuestionTextArea/QuestionTextArea.jsx
--- a/src/components/QuestionTextArea/QuestionTextArea.jsx	(revision 4ffef9bd9466d66884ce30e194041a2d813a86fd)
+++ b/src/components/QuestionTextArea/QuestionTextArea.jsx	(revision 1907ff12bcba588b060a38650bbf444b1cb7e411)
@@ -1,14 +1,14 @@
-import React from 'react';
-import TextArea from '../TextArea/textArea';
-import './style.css';
+import React from "react";
+import TextArea from "../TextArea/textArea";
+import "./style.css";
 
-import { useFormContext } from '../../utils/formContext.jsx';
+import { useFormContext } from "../../utils/formContext.jsx";
 
 const QuestionTextArea = ({ quest }) => {
   const { formState, setFormState } = useFormContext();
 
   const handleChange = (value, i) => {
-    const newAnswered = [...(formState[quest.id]?.value || [])];
+    const newAnswered = [...(formState.form[quest.id]?.value || [])];
     newAnswered[i] = value;
 
     setFormState({ type: quest.type, value: newAnswered }, quest.id);
@@ -22,7 +22,7 @@
           text={answer}
           extraText={false}
           classN="textArea"
-          value={formState[quest.id]?.value[i] || ''}
+          value={formState.form[quest.id]?.value[i] || ""}
           func={(value) => handleChange(value, i)}
           maxLength={150}
         />
Index: src/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/index.jsx b/src/index.jsx
--- a/src/index.jsx	(revision 4ffef9bd9466d66884ce30e194041a2d813a86fd)
+++ b/src/index.jsx	(revision 1907ff12bcba588b060a38650bbf444b1cb7e411)
@@ -1,26 +1,25 @@
-import React from 'react';
-import { render } from 'react-dom';
+import React from "react";
+import { render } from "react-dom";
 import {
   HashRouter as Router,
   Switch,
   Route,
   Link,
   useLocation,
-} from 'react-router-dom';
-import { home } from './texts/homeTexts.js';
-import { articleTexts } from './texts/articleTexts.js';
-import { routes } from './links.js';
-import './index.html';
-import './style.css';
+} from "react-router-dom";
+import { home } from "./texts/homeTexts.js";
+import { articleTexts } from "./texts/articleTexts.js";
+import { routes } from "./links.js";
+import "./index.html";
+import "./style.css";
 
-import Navbar from './components/Navbar/navbar.jsx';
-import Footer from './components/Footer/footer.jsx';
-import Article from './components/Article/article.jsx';
-import ScrollToTop from './components/ScrollToTop/scrollToTop.jsx';
-import { FormContextProvider } from './utils/formContext.jsx';
+import Navbar from "./components/Navbar/navbar.jsx";
+import Footer from "./components/Footer/footer.jsx";
+import Article from "./components/Article/article.jsx";
+import ScrollToTop from "./components/ScrollToTop/scrollToTop.jsx";
+import { FormContextProvider } from "./utils/formContext.jsx";
 
 const App = () => {
-
   return (
     <FormContextProvider>
       <Router>
@@ -55,4 +54,4 @@
   );
 };
 
-render(<App />, document.querySelector('#app'));
+render(<App />, document.querySelector("#app"));
Index: src/utils/formContext.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/utils/formContext.jsx b/src/utils/formContext.jsx
--- a/src/utils/formContext.jsx	(revision 4ffef9bd9466d66884ce30e194041a2d813a86fd)
+++ b/src/utils/formContext.jsx	(revision 1907ff12bcba588b060a38650bbf444b1cb7e411)
@@ -1,42 +1,70 @@
-import React, { createContext, useContext, useState, useMemo } from 'react';
-import { db } from '../db.js';
-import firebase from 'firebase/app';
-import { formQuest } from '../texts/formTexts.js';
+import React, { createContext, useContext, useState, useMemo } from "react";
+import { db } from "../db.js";
+import { formQuest } from "../texts/formTexts.js";
 
-const initialFormState = Array(formQuest.length).fill(undefined);
-
-// const [docId, setDocId] = useState()
+const initialFormState = {
+  docId: null,
+  form: formQuest.map((question) => {
+    const result = { type: question.type };
+    switch (question.type) {
+      case "checkbox":
+        result.value = Array(question.answers.length).fill(false);
+        result.noPrevious = false;
+        break;
+      case "radioButton":
+        result.value = null;
+        break;
+      case "input":
+        result.value = Array(question.answers.length).fill(null);
+        break;
+      case "textArea":
+      case "longTextArea":
+        result.value = [null];
+        break;
+    }
+    return result;
+  }),
+};
 
 const createFormContextValue = ({ formState, setFormState }) => {
   
   return {
     formState,
     setFormState: (value, i) => {
-      const newValue = [...formState];
-      
-      newValue[i] = value;
-      // console.log(newValue)
-      
-      setFormState(newValue);
-      
-      const document = db.collection("porodni-prani").doc(docId);
-      document.set(newValue);
-      formState(docId);
+      let newState = {
+        ...formState,
+      };
+      if (typeof i === "string") {
+        switch (i) {
+          case "docId":
+            newState.docId = value;
+            break;
+          case "all":
+            newState = value;
+            break;
+        }
+      } else {
+        newState.form = [...formState.form];
+        newState.form[i] = value;
+      }
+
+      // console.log(newState)
+      setFormState(newState);
     },
   };
-}
+};
 
 const FormContext = createContext(
   createFormContextValue({
     formState: initialFormState,
     setFormState: () =>
-      console.error('You are using FormContext without FormContextProvider!'),
-  }),
+      console.error("You are using FormContext without FormContextProvider!"),
+  })
 );
 
 export const useFormContext = () => {
   return useContext(FormContext);
-}
+};
 
 export const FormContextProvider = ({ children }) => {
   const [formState, setFormState] = useState(initialFormState);
@@ -50,8 +78,7 @@
       {children}
     </FormContext.Provider>
   );
-}
-
+};
 
 export const isFormValid = (formState) => {
   if (formState.length !== formQuest.length) {
@@ -63,7 +90,7 @@
       return false; // optional question no need to validate anymore
     }
 
-    if (typeof quest === 'undefined') {
+    if (quest === null) {
       return true; // mandatory question is invalid
     }
 
@@ -71,15 +98,15 @@
 
     // validation for each question type
     switch (quest.type) {
-      case 'checkbox':
+      case "checkbox":
         return !isCheckboxQuestionValid(quest, i);
-      case 'input':
+      case "input":
         return quest.value.length !== questOptionCount; // all inputs are filled
-      case 'textArea':
+      case "textArea":
         return quest.value.length !== questOptionCount; // same as "input"
-      case 'longTextArea':
+      case "longTextArea":
         return quest.value.length !== questOptionCount; // same as "input"
-      case 'radioButton':
+      case "radioButton":
         return !quest.value; // radio option is checked
     }
 
